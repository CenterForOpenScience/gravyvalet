[mypy]
# start with an ideal: enable strict type-checking, then loosen in module-specific config
# see https://mypy.readthedocs.io/en/stable/existing_code.html#introduce-stricter-options
strict = True
## BEGIN aspects of `strict` that could be loosened:
# disallow_subclassing_any = False
# warn_unused_configs = False
# warn_redundant_casts = False
# warn_unused_ignores = False
# strict_equality = False
# strict_concatenate = False
# check_untyped_defs = False
# disallow_untyped_decorators = False
# disallow_any_generics = False
# disallow_untyped_calls = False
# disallow_incomplete_defs = False
# disallow_untyped_defs = False
# no_implicit_reexport = False
# warn_return_any = False
## END aspects of `strict`

# prefer types that can be understood by reading code in only one place
local_partial_types = True
# avoid easily-avoidable dead code
warn_unreachable = True

###
# module-specific config

[mypy-addon_toolkit.*]
# addon_toolkit fully typed!

[mypy-addon_service.*,app.*,manage]
# got untyped dependencies -- this is fine
ignore_missing_imports = True
disable_error_code = import-untyped,import-not-found
## loosen strict:
disallow_subclassing_any = False
disallow_untyped_decorators = False
disallow_any_generics = False
disallow_untyped_calls = False
disallow_incomplete_defs = False
disallow_untyped_defs = False
warn_return_any = False

[mypy-addon_service.migrations.*]
# django migrations are whatever
strict = False
disable_error_code = var-annotated
