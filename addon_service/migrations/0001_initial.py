# Generated by Django 4.2.7 on 2024-05-09 18:29

import functools

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import (
    migrations,
    models,
)

import addon_service.addon_imp.validators
import addon_service.common.enums.validators
import addon_service.credentials.validators
import addon_service.external_storage_service.enums


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AuthorizedStorageAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                ("account_name", models.CharField(blank=True, default="")),
                (
                    "int_authorized_capabilities",
                    models.IntegerField(
                        validators=[
                            addon_service.common.enums.validators.validate_addon_capability
                        ]
                    ),
                ),
                ("default_root_folder", models.CharField(blank=True)),
                ("_api_base_url", models.URLField(blank=True)),
            ],
            options={
                "verbose_name": "Authorized Storage Account",
                "verbose_name_plural": "Authorized Storage Accounts",
            },
        ),
        migrations.CreateModel(
            name="ExternalCredentials",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                ("credentials_blob", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "External Credentials",
                "verbose_name_plural": "External Credentials",
            },
        ),
        migrations.CreateModel(
            name="OAuth2ClientConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                ("auth_uri", models.URLField()),
                ("auth_callback_url", models.URLField()),
                ("token_endpoint_url", models.URLField()),
                ("client_id", models.CharField(null=True)),
                ("client_secret", models.CharField(null=True)),
            ],
            options={
                "verbose_name": "OAuth2 Client Config",
                "verbose_name_plural": "OAuth2 Client Configs",
            },
        ),
        migrations.CreateModel(
            name="OAuth2TokenMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                ("state_nonce", models.CharField(blank=True, null=True)),
                (
                    "refresh_token",
                    models.CharField(blank=True, db_index=True, null=True),
                ),
                (
                    "access_token_expiration",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "authorized_scopes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(), size=None
                    ),
                ),
            ],
            options={
                "verbose_name": "OAuth2 Token Metadata",
                "verbose_name_plural": "OAuth2 Token Metadata",
            },
        ),
        migrations.CreateModel(
            name="ResourceReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                ("resource_uri", models.URLField(db_index=True, unique=True)),
            ],
            options={
                "verbose_name": "Resource Reference",
                "verbose_name_plural": "Resource References",
            },
        ),
        migrations.CreateModel(
            name="UserReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                ("user_uri", models.URLField(db_index=True, unique=True)),
                ("deactivated", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "User Reference",
                "verbose_name_plural": "User References",
            },
        ),
        migrations.CreateModel(
            name="ExternalStorageService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                ("name", models.CharField()),
                (
                    "int_addon_imp",
                    models.IntegerField(
                        validators=[
                            addon_service.addon_imp.validators.validate_storage_imp
                        ]
                    ),
                ),
                (
                    "int_credentials_format",
                    models.IntegerField(
                        validators=[
                            addon_service.credentials.validators.validate_credentials_format
                        ]
                    ),
                ),
                (
                    "int_service_type",
                    models.IntegerField(
                        default=1,
                        validators=[
                            functools.partial(
                                addon_service.common.enums.validators._validate_enum_value,
                                *(
                                    addon_service.external_storage_service.enums.ServiceTypes,
                                ),
                                **{}
                            )
                        ],
                    ),
                ),
                ("max_concurrent_downloads", models.IntegerField()),
                ("max_upload_mb", models.IntegerField()),
                (
                    "supported_scopes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(), blank=True, null=True, size=None
                    ),
                ),
                ("api_base_url", models.URLField(blank=True, default="")),
                (
                    "oauth2_client_config",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="external_storage_services",
                        to="addon_service.oauth2clientconfig",
                    ),
                ),
            ],
            options={
                "verbose_name": "External Storage Service",
                "verbose_name_plural": "External Storage Services",
            },
        ),
        migrations.CreateModel(
            name="ConfiguredStorageAddon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                ("root_folder", models.CharField(blank=True)),
                (
                    "int_connected_capabilities",
                    models.IntegerField(
                        validators=[
                            addon_service.common.enums.validators.validate_addon_capability
                        ]
                    ),
                ),
                (
                    "authorized_resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configured_storage_addons",
                        to="addon_service.resourcereference",
                    ),
                ),
                (
                    "base_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configured_storage_addons",
                        to="addon_service.authorizedstorageaccount",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configured Storage Addon",
                "verbose_name_plural": "Configured Storage Addons",
            },
        ),
        migrations.AddField(
            model_name="authorizedstorageaccount",
            name="_credentials",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="authorized_storage_account",
                to="addon_service.externalcredentials",
            ),
        ),
        migrations.AddField(
            model_name="authorizedstorageaccount",
            name="account_owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="authorized_storage_accounts",
                to="addon_service.userreference",
            ),
        ),
        migrations.AddField(
            model_name="authorizedstorageaccount",
            name="external_storage_service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="authorized_storage_accounts",
                to="addon_service.externalstorageservice",
            ),
        ),
        migrations.AddField(
            model_name="authorizedstorageaccount",
            name="oauth2_token_metadata",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="authorized_storage_accounts",
                to="addon_service.oauth2tokenmetadata",
            ),
        ),
        migrations.CreateModel(
            name="AddonOperationInvocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(editable=False)),
                ("modified", models.DateTimeField()),
                (
                    "int_invocation_status",
                    models.IntegerField(
                        default=1,
                        validators=[
                            addon_service.common.enums.validators.validate_invocation_status
                        ],
                    ),
                ),
                ("operation_identifier", models.TextField()),
                ("operation_kwargs", models.JSONField(blank=True, default=dict)),
                (
                    "operation_result",
                    models.JSONField(blank=True, default=None, null=True),
                ),
                ("exception_type", models.TextField(blank=True, default="")),
                ("exception_message", models.TextField(blank=True, default="")),
                ("exception_context", models.TextField(blank=True, default="")),
                (
                    "by_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="addon_service.userreference",
                    ),
                ),
                (
                    "thru_addon",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="addon_service.configuredstorageaddon",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["operation_identifier"],
                        name="addon_servi_operati_4bdf63_idx",
                    ),
                    models.Index(
                        fields=["exception_type"], name="addon_servi_excepti_35dee4_idx"
                    ),
                ],
            },
        ),
    ]
